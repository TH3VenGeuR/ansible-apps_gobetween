[logging]
level = "{{ gobetween_log_level }}"   # "debug" | "info" | "warn" | "error"
output = "{{ gobetween_log_file }}" # "stdout" | "stderr" | "/path/to/gobetween.log"

[profiler]
enabled = {{ gobetween_profiler }} # false | true
bind = ":{{ gobetween_profiler_port }}"  # "host:port"

[api]
enabled = {{ gobetween_api }}  # true | false
bind = ":{{ gobetween_api_port }}"  # "host:port"
cors = {{ gobetween_api_cors }}    # cross-origin resource sharing

[metrics]
enabled = {{ gobetween_metrics }} # false | true
bind = ":{{ gobetween_metrics_port }}"  # "host:port"

[defaults]

[servers]
{% for service in gobetween_targets %}
  [servers.{{ service.name }}]
  bind = "{{ service.bind_address | default('0.0.0.0') }}:{{ service.port }}"
  protocol = "{{ service.protocol | default('tcp') }}"
  balance = "{{ service.balance | default('roundrobin') }}"

  max_connections = {{ service.max_connections | default('0') }}       # Maximum simultaneous connections to the server
  client_idle_timeout = "{{ service.client_idle_timeout | default('2m') }}"        # Client inactivity duration before forced connection drop
  backend_idle_timeout = "{{ service.backend_idle_timeout | default('2m') }}"       # Backend inactivity duration before forced connection drop
  backend_connection_timeout = "{{ service.backend_conn_timeout | default('0') }}"  # Backend connection timeout (ignored in udp)

    [servers.{{ service.name }}.{{ service.protocol }}]
    max_responses = {{ service.max_reponses | default('10') }}
    max_requests  = {{ service.max_requests | default('1') }} 		    #"fire and forget" mode
    transparent = {{ service.transparent | default('true') | lower }}

    [servers.{{ service.name }}.discovery]
    kind = "static"
    static_list = [ {% for host in service.targets %}"{{ host }}:{{ service.port }}"{{"," if not loop.last else "" }} {% endfor %}]

    {% if gobetween_healthcheck[service.name] is defined %}
[servers.{{ service.name }}.healthcheck]   # (optional)
    kind = "{{ gobetween_healthcheck[service.name].kind | default('exec') }}"
    interval = "{{ gobetween_healthcheck[service.name].interval | default('30s') }}"
    timeout = "{{ gobetween_healthcheck[service.name].timeout | default('5s') }}"
    exec_command = "{{ gobetween_healthcheck[service.name].exec_command }}"
    exec_expected_positive_output = "{{ gobetween_healthcheck[service.name].exec_expected_positive_output }}"
    exec_expected_negative_output = "{{ gobetween_healthcheck[service.name].exec_expected_negative_output }}"
    {% endif %}

{% endfor %}
